# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module DateTimeOptionalTest
  # QueryParamsController
  class QueryParamsController < BaseController
    @instance = QueryParamsController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # TODO: type endpoint description here
    # @param [Integer] number Required parameter: Example:
    # @param [Integer] number_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_send_number_as_optional(number,
                                    number1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/numberAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'number' => number,
          'number1' => number1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Long] long Required parameter: Example:
    # @param [Long] long_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_send_long_as_optional(long,
                                  long1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/longAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'long' => long,
          'long1' => long1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Float] precision Required parameter: Example:
    # @param [Float] precision_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_precision_as_optional(precision,
                                  precision1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/precisionAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'precision' => precision,
          'precision1' => precision1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Boolean] boolean Required parameter: Example:
    # @param [Boolean] boolean_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_boolean_as_optional(boolean,
                                boolean1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/booleanAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'boolean' => boolean,
          'boolean1' => boolean1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Required parameter: Example:
    # @param [DateTime] date_time_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_rfc_1123_datetime_as_optional(date_time,
                                          date_time1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/rfc1123dateTimeAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'dateTime' => date_time.httpdate,
          'dateTime1' => date_time1.httpdate
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Required parameter: Example:
    # @param [DateTime] date_time_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_rfc_3339_datetime_as_optional(date_time,
                                          date_time1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/rfc3339dateTimeAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'dateTime' => date_time,
          'dateTime1' => date_time1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Date] date Required parameter: Example:
    # @param [Date] date_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_send_date_as_optional(date,
                                  date1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/dateAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'date' => date,
          'date1' => date1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] string Required parameter: Example:
    # @param [String] string_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_send_string_as_optional(string,
                                    string1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/stringAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'string' => string,
          'string1' => string1
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Required parameter: Example:
    # @param [DateTime] date_time_1 Optional parameter: Example:
    # @return ServerResponse response from the API call
    def get_unixdatetime_as_optional(date_time,
                                     date_time1 = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/query/unixdateTimeAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'dateTime' => date_time.to_time.utc.to_i,
          'dateTime1' => date_time1.to_time.utc.to_i
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ServerResponse.from_hash(decoded)
    end
  end
end
