# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

require_relative 'controller_test_base'

class ErrorCodesControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def self.startup
    self.controller = @@api_client.error_codes
  end

  # Todo: Add description for test test_test_rfc_3339_date_time_exception
  def test_test_rfc_3339_date_time_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithRfc3339DateTimeException'){ 
      result = self.class.controller.get_receive_exception_with_rfc_3339_datetime()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_receive_rfc_1123_exception
  def test_receive_rfc_1123_exception()

    # Perform the API call through the SDK function
    assert_raise('Rfc1123Exception'){ 
      result = self.class.controller.get_receive_exception_with_rfc_1123_datetime()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_receive_unix_timestamp_exception
  def test_receive_unix_timestamp_exception()

    # Perform the API call through the SDK function
    assert_raise('UnixTimeStampException'){ 
      result = self.class.controller.get_receive_exception_with_unixtimestamp_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_date_in_exception
  def test_date_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithDateException'){ 
      result = self.class.controller.get_date_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_uuid_in_exception
  def test_uuid_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithUUIDException'){ 
      result = self.class.controller.get_uuid_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_dynamic_in_exception
  def test_dynamic_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithDynamicException'){ 
      result = self.class.controller.get_dynamic_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_precision_in_exception
  def test_precision_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithPrecisionException'){ 
      result = self.class.controller.get_precision_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_boolean_in_exception
  def test_boolean_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithBooleanException'){ 
      result = self.class.controller.get_boolean_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_long_in_exception
  def test_long_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithLongException'){ 
      result = self.class.controller.get_long_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_number_in_exception
  def test_number_in_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithNumberException'){ 
      result = self.class.controller.get_number_in_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_exception_with_string
  def test_exception_with_string()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithStringException'){ 
      result = self.class.controller.get_exception_with_string()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

end
